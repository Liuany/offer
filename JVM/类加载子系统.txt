【作用】：类加载器子系统负责从文件系统或者网络中加载Class文件，class文件在文件开头有特定的文件标识(如java的 CAFF BABE)。
  ①类加载子系统只扶着加载文件，至于文件是否能运行则有执行引擎来决定(Execution Engine)
  ②加载的类信息存放在方法区。

【类的加载过程】
  <加载>
    ①通过一个类的全限定名获取定义此类的二进制字节流。
    ②将这个二进制字节流所代表的静态存储结构转化为方法区的运行时数据结构。
    ③在内存中生成一个代表这个类的Java.lang.class对象，作为方法区这个类的各种数据的访问入口。
    [类加载器]：引导类加载器(启动类加载器 Bootstrap ClassLoader)、扩展类加载器(Extension ClassLoader)、系统类加载器(AppClassLoader)、自定义类加载器(UserDefined ClassLoader)
        引导类加载器：用C/C++语言实现，镶嵌在JVM内部，用来加载Java的核心库(JAVA_HOME/jre/lib/rt.jar/resource.jar或sun.boot.class.path路劲下的内容)，用于提供JVM自身需要
      的类。没有父类加载器，是加载扩展类的应用程序类加载器，并指定为它们的父类加载器。只加载包名为java/javax/sun等开头的类。
        扩展类加载器：Java语言编写，派生与ClassLoader，父类加载器为引导类加载器，从java.ext.dirs系统属性所指定的目录中加载类库，或从JDK的安装目录的jre/lib/ext子目录(
      扩展目录)下加载类库。如果用户创建的jar放在此目录下，也会由扩展类加载器加载。
        系统类加载器：java语言编写，父类加载器为扩展类加载器，它负责加载环境变量classpath或系统属性java.class.path指定路径下的类库，是程序中默认的类加载器，一般来说
      ，Java应用类都是由它来加载的。
        自定义类加载器：私人订制，继承抽象类java.lang.ClassLoader，逻辑写在findClass()方法中(不建议覆盖loadClass()方法)。
    [获取类加载器的途径]：
      ①获取当前类的ClassLoader：clazz.getClassLoader()
      ②获取当前线程上下文的ClassLoader：Thread.currentThread().getContextClassLoader()
      ③获取系统的ClassLoader：ClassLoader.getSystemClassLoader()
      ④获取调用者的ClassLoader()：DriverManager.getCallerClassLoader()

  <链接>
      ①验证 (Verify)：确保Class文件的字节流中包含信息符合当前虚拟机需求，保证类加载的正确性，不会危害到虚拟机本身，主要包含文件格式验证、元数据验证、字节码验证、符号引
    用验证。
      ②准备(Prepare)：为变量分配内存并且设置改类变量的默认初始化值，即零值。这里不包含用final修饰的static，因为final在编译的时候就会分配了，准备阶段会显示地初始化，同
    时也不会为实例变量分配初始化，类的变量会分配在方法区中，而实例变量则会随着对象一起分配到Java堆中。
      ③解析(Resolve)：将常量池中的符号引用转换成直接引用。
        1>事实上解析的操作往往会伴随着JVM在执行完初始化之后再执行。
	2>符号引用：一组符号用来描述所引用的目标。
	3>直接引用：直接指向目标的指针，相对偏移量或一个间接定位到目标的句柄。
	4>解析动作主要针对类或接口、字段、类方法、接口方法、方法类型等。对应常量池中的CONSTANT_Class_info、CONSTANT_Fieldref_info、CONSATNT_Methodref_info等。
  
  <初始化>
      初始化阶段就是执行类构造方法<clinit>()的过程，<clinit>()不同于类的构造器，若该类具有父类，JVM会保证在子类的<clinit>()执行前，父类的<clinit>()已经执行完毕且虚拟机
    必须保证一个类的<clinit>()方法在多线程下被同步加锁。

【双亲委派机制】
  Java虚拟机对文件采用按需加载的方式，加载某个class文件时采用的是双亲委派模式，即把请求交由父类处理，它是一种任务委派模式。
  ①如果一个类加载器收到了类加载请求，它首先不会自己去加载，而是把这个请求委托给父类的加载器去执行。
  ②如果父类加载器还存在其父类加载器，则进一步向上委托，依次递归，请求最终达到顶层的启动类加载器。
  ③如果父类加载器可以完成加载任务，则返成功返回，倘若父类加载器无法完成加载任务，子类才会去尝试加载。

【沙箱安全机制】
  封装核心代码以保护java核心代码。

【类的主动使用和被动使用】
  主动使用的七种情况：1、创建类的实例 2、访问某个类或接口的静态变量，或者对该静态变量赋值 3、调用类的静态方法 4、反射(eg:Class.forName("com.xiaochun.Test"))
  		      5、初始化一个类的子类 6、Java虚拟机启动时被标明为启动类的类 7、JDK7开始提供的动态语言支持：java.lang.invoke.MethodHandle实例解析结果
		      REF_getStatic、REF_putStatic、REF_invokeStatic

【Q1】双亲委派机制有哪些优势？
  1、避免类的重复加载。 2、保护程序安全，防止核心API被随意篡改。

【Q2】判定两个class对象是否为同一个类的条件有哪些？
  1、类的完整名必须一致，包括包名。 2、加载这个类的ClassLoader(指ClassLoader实例对象)必须相同。